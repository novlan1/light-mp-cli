#! /usr/bin/env node
const chalk = require("chalk");
const program = require("commander");
const figlet = require("figlet");

const CLI_NAME = 'light-mp-cli';

/**
 * node bin/www upload someAppid --webhookUrl=url1 --appName=appName2 --env=env3 --robot=2
 */
program
  .command("upload <appId>") 
  .description("upload mp code")
  .option('-n, --appName <appName>', 'set appName')
  .option('-w, --webhookUrl <webhookUrl>', 'set webhookUrl for wecom robot')
  .option('-e, --env <env>', 'set env')
  .option('-r, --robot <robot>', 'set robotNumber')
  .option('-t, --tryTimes <tryTimes>', 'set tryTimes')
  .option('-a, --author <author>', 'set author')
  .option('-c, --chatId <chatId>', 'set wecom robot chatId')
  .action((appId, options) => {
    console.log('appId: ', appId);
    console.log('options: ', options);
    

    const { 
      appName,
      webhookUrl,
      env,
      robot,
      tryTimes,
      author,
      chatId,
    } = options;

    if (!env || !robot) {
      throw new Error('Please set env and robot')
    }

    require("../src/upload")({
      appId,
      appName,
      webhookUrl,
      env,
      robot,
      tryTimes,
      author,
      chatId,
    });
  });

program
  .command("preview <appId>") 
  .description("preview mp code")
  .action((appId) => {
    // 处理用户输入create 指令附加的参数
    require("../src/preview")({
      appId
    });
  });

program
  .command("config [value]")
  .description("inspect and modify the config")
  .option("-g, --get <key>", "get value by key")
  .option("-s, --set <key> <value>", "set option[key] is value")
  .option("-d, --delete <key>", "delete option by key")
  .action((value, keys) => {
    console.log(value, keys);
  });

program.on("--help", function () {
  console.log(
    "\r\n" +
      figlet.textSync(`${CLI_NAME}`, {
        // font: "3D-ASCII",
        horizontalLayout: "default",
        verticalLayout: "default",
        width: 80,
        whitespaceBreak: true,
      })
  );
  // 前后两个空行调整格式，更舒适
  console.log();
  console.log(
    `Run ${chalk.cyan(
      `${CLI_NAME} <command> --help`
    )} for detailed usage of given command.`
  );
  console.log();
});

program
  .name(CLI_NAME)
  .usage(`<command> [option]`)
  .version(`${CLI_NAME} ${require("../package.json").version}`);


// 解析用户执行时输入的参数
// process.argv 是 nodejs 提供的属性
// npm run server --port 3000
// 后面的 --port 3000 就是用户输入的参数
program.parse(process.argv);
